{"version":3,"file":"blocks/advanced-image/view.js","mappings":";;;;AAAA,CAAC,YAAW;EACR;EACA,SAASA,YAAYA,CAAA,EAAG;IAEpB;IACA,IAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAa,CAAC,4BAA4B,CAAC;IACpE,IAAMC,aAAa,GAAGH,OAAO,CAACI,OAAO,CAACC,qBAAqB;IAE3D,IAAI,CAACF,aAAa,EAAE;MAChB;IACJ;;IAEA;IACA,IAAI,sBAAsB,IAAIG,MAAM,EAAE;MAClC,IAAMC,QAAQ,GAAG,IAAIC,oBAAoB,CAAC,UAACC,OAAO,EAAEF,QAAQ,EAAK;QAC7DE,OAAO,CAACC,OAAO,CAAC,UAAAC,KAAK,EAAI;UACrB,IAAIA,KAAK,CAACC,cAAc,EAAE;YACtB,IAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM;YACxB,IAAID,GAAG,CAACT,OAAO,CAACW,GAAG,EAAE;cACjBF,GAAG,CAACE,GAAG,GAAGF,GAAG,CAACT,OAAO,CAACW,GAAG;cACzBF,GAAG,CAACG,eAAe,CAAC,UAAU,CAAC;YACnC;YACA,IAAIH,GAAG,CAACT,OAAO,CAACa,MAAM,EAAE;cACpBJ,GAAG,CAACI,MAAM,GAAGJ,GAAG,CAACT,OAAO,CAACa,MAAM;cAC/BJ,GAAG,CAACG,eAAe,CAAC,aAAa,CAAC;YACtC;YACAT,QAAQ,CAACW,SAAS,CAACL,GAAG,CAAC;UAC3B;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;MAEFZ,QAAQ,CAACkB,gBAAgB,CAAC,eAAe,CAAC,CAACT,OAAO,CAAC,UAAAG,GAAG,EAAI;QACtDN,QAAQ,CAACa,OAAO,CAACP,GAAG,CAAC;MACzB,CAAC,CAAC;IACN,CAAC,MAAM;MACH;MACAP,MAAM,CAACe,gBAAgB,CAAC,MAAM,EAAE,YAAW;QACvCpB,QAAQ,CAACkB,gBAAgB,CAAC,eAAe,CAAC,CAACT,OAAO,CAAC,UAAAG,GAAG,EAAI;UACtD,IAAIA,GAAG,CAACT,OAAO,CAACW,GAAG,EAAE;YACjBF,GAAG,CAACE,GAAG,GAAGF,GAAG,CAACT,OAAO,CAACW,GAAG;YACzBF,GAAG,CAACG,eAAe,CAAC,UAAU,CAAC;UACnC;UACA,IAAIH,GAAG,CAACT,OAAO,CAACa,MAAM,EAAE;YACpBJ,GAAG,CAACI,MAAM,GAAGJ,GAAG,CAACT,OAAO,CAACa,MAAM;YAC/BJ,GAAG,CAACG,eAAe,CAAC,aAAa,CAAC;UACtC;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;IACN;EACJ;;EAEA;EACA,SAASM,aAAaA,CAAA,EAAG;IACrB,IAAIrB,QAAQ,CAACsB,UAAU,KAAK,SAAS,EAAE;MACnCtB,QAAQ,CAACoB,gBAAgB,CAAC,kBAAkB,EAAEtB,YAAY,CAAC;IAC/D,CAAC,MAAM;MACHA,YAAY,CAAC,CAAC;IAClB;;IAEA;IACA,IAAMQ,QAAQ,GAAG,IAAIiB,gBAAgB,CAAC,UAAAC,SAAS,EAAI;MAC/CA,SAAS,CAACf,OAAO,CAAC,UAAAgB,QAAQ,EAAI;QAC1B,IAAIA,QAAQ,CAACC,UAAU,CAACC,MAAM,EAAE;UAC5B7B,YAAY,CAAC,CAAC;QAClB;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;IAEFQ,QAAQ,CAACa,OAAO,CAACnB,QAAQ,CAAC4B,IAAI,EAAE;MAC5BC,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE;IACb,CAAC,CAAC;EACN;;EAEA;EACAzB,MAAM,CAAC0B,cAAc,GAAGjC,YAAY;;EAEpC;EACAuB,aAAa,CAAC,CAAC;AACnB,CAAC,EAAE,CAAC,C","sources":["webpack://frontis-blocks/./src/blocks/advanced-image/view.js"],"sourcesContent":["(function() {\n    // Core lazy-load initializer\n    function initLazyLoad() {\n\n        // grab the first wrapper (or narrow down with a more specific selector)\n        const wrapper = document.querySelector('.fb-advanced-image-wrapper');\n        const switcherValue = wrapper.dataset.smartLazyLoadSwitcher; \n\n        if (!switcherValue) {\n            return;\n        }\n\n        // Modern browsers with IntersectionObserver\n        if ('IntersectionObserver' in window) {\n            const observer = new IntersectionObserver((entries, observer) => {\n                entries.forEach(entry => {\n                    if (entry.isIntersecting) {\n                        const img = entry.target;\n                        if (img.dataset.src) {\n                            img.src = img.dataset.src;\n                            img.removeAttribute('data-src');\n                        }\n                        if (img.dataset.srcset) {\n                            img.srcset = img.dataset.srcset;\n                            img.removeAttribute('data-srcset');\n                        }\n                        observer.unobserve(img);\n                    }\n                });\n            });\n            \n            document.querySelectorAll('img[data-src]').forEach(img => {\n                observer.observe(img);\n            });\n        } else {\n            // Fallback for older browsers\n            window.addEventListener('load', function() {\n                document.querySelectorAll('img[data-src]').forEach(img => {\n                    if (img.dataset.src) {\n                        img.src = img.dataset.src;\n                        img.removeAttribute('data-src');\n                    }\n                    if (img.dataset.srcset) {\n                        img.srcset = img.dataset.srcset;\n                        img.removeAttribute('data-srcset');\n                    }\n                });\n            });\n        }\n    }\n\n    // Set up lazy-load on initial page load and observe dynamic content\n    function setupLazyLoad() {\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', initLazyLoad);\n        } else {\n            initLazyLoad();\n        }\n\n        // Watch for new images added to the DOM\n        const observer = new MutationObserver(mutations => {\n            mutations.forEach(mutation => {\n                if (mutation.addedNodes.length) {\n                    initLazyLoad();\n                }\n            });\n        });\n\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    }\n\n    // Expose a global re-initializer\n    window.reinitLazyLoad = initLazyLoad;\n\n    // Kick things off\n    setupLazyLoad();\n})();\n"],"names":["initLazyLoad","wrapper","document","querySelector","switcherValue","dataset","smartLazyLoadSwitcher","window","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","img","target","src","removeAttribute","srcset","unobserve","querySelectorAll","observe","addEventListener","setupLazyLoad","readyState","MutationObserver","mutations","mutation","addedNodes","length","body","childList","subtree","reinitLazyLoad"],"sourceRoot":""}
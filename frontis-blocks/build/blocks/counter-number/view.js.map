{"version":3,"file":"blocks/counter-number/view.js","mappings":"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","sources":["webpack://frontis-blocks/./src/blocks/counter-number/view.js"],"sourcesContent":["(function() {\n    function initCounterAnimation() {\n        const counters = document.querySelectorAll('.fb-counter-number');\n        \n        counters.forEach(function(counter) {\n            if (counter.dataset.animated === \"true\") return;\n            \n            var observer = new IntersectionObserver(function(entries) {\n                entries.forEach(function(entry) {\n                    if (entry.isIntersecting) {\n                        animateCounter(counter);\n                        counter.dataset.animated = \"true\";\n                        observer.disconnect();\n                    }\n                });\n            }, { threshold: 0.5 });\n            \n            observer.observe(counter);\n        });\n    }\n    \n    function animateCounter(counterElement) {\n        var start = parseFloat(counterElement.getAttribute('counter-start')) || 0;\n        var end = parseFloat(counterElement.getAttribute('counter-end')) || 0;\n        var duration = parseInt(counterElement.getAttribute('counter-duration'), 10) || 2000;\n        var separatorEnabled = counterElement.getAttribute('separator-switch') === 'true';\n        var separatorType = counterElement.getAttribute('separator-type') || 'comma';\n        \n        var startTime = null;\n        \n        function step(timestamp) {\n            if (!startTime) startTime = timestamp;\n            \n            var progress = Math.min((timestamp - startTime) / duration, 1);\n            var current = progress * (end - start) + start;\n            \n            let formattedNumber;\n            \n            // Check if the counter values have decimal places\n            const hasDecimal = !Number.isInteger(start) || !Number.isInteger(end);\n            const decimalPlaces = hasDecimal ? 1 : 0;\n            \n            if (separatorEnabled) {\n                switch (separatorType) {\n                    case 'comma':\n                        formattedNumber = current.toLocaleString('en-US', {\n                            minimumFractionDigits: decimalPlaces,\n                            maximumFractionDigits: decimalPlaces\n                        });\n                        break;\n                    case 'dot':\n                        formattedNumber = current.toLocaleString('de-DE', {\n                            minimumFractionDigits: decimalPlaces,\n                            maximumFractionDigits: decimalPlaces\n                        });\n                        break;\n                    case 'space':\n                        formattedNumber = current.toLocaleString('fr-FR', {\n                            minimumFractionDigits: decimalPlaces,\n                            maximumFractionDigits: decimalPlaces\n                        }).replace(/\\./g, ' ');\n                        break;\n                    default:\n                        formattedNumber = current.toLocaleString(undefined, {\n                            minimumFractionDigits: decimalPlaces,\n                            maximumFractionDigits: decimalPlaces\n                        });\n                }\n            } else {\n                // Only show decimal places if necessary\n                formattedNumber = hasDecimal ? current.toFixed(decimalPlaces) : Math.round(current).toString();\n            }\n            \n            counterElement.textContent = formattedNumber;\n            \n            if (progress < 1) {\n                window.requestAnimationFrame(step);\n            }\n        }\n        \n        window.requestAnimationFrame(step);\n    }\n    \n    var setupDone = false;\n    \n    function setupInitialization() {\n        if (setupDone) return;\n        setupDone = true;\n        \n        if (document.readyState === 'complete' || document.readyState === 'interactive') {\n            setTimeout(initCounterAnimation, 100);\n        } else {\n            document.addEventListener(\"DOMContentLoaded\", function() {\n                setTimeout(initCounterAnimation, 100);\n            });\n        }\n        \n        if (typeof window !== 'undefined') {\n            var lastUrl = window.location.href;\n            var urlObserver = new MutationObserver(function() {\n                if (lastUrl !== window.location.href) {\n                    lastUrl = window.location.href;\n                    setTimeout(initCounterAnimation, 300);\n                }\n            });\n            \n            urlObserver.observe(document.body, { childList: true, subtree: true });\n        }\n    }\n    \n    setupInitialization();\n    \n    window.reinitCounterAnimation = initCounterAnimation;\n})();"],"names":["initCounterAnimation","counters","document","querySelectorAll","forEach","counter","dataset","animated","observer","IntersectionObserver","entries","entry","isIntersecting","animateCounter","disconnect","threshold","observe","counterElement","start","parseFloat","getAttribute","end","duration","parseInt","separatorEnabled","separatorType","startTime","step","timestamp","progress","Math","min","current","formattedNumber","hasDecimal","Number","isInteger","decimalPlaces","toLocaleString","minimumFractionDigits","maximumFractionDigits","replace","undefined","toFixed","round","toString","textContent","window","requestAnimationFrame","setupDone","setupInitialization","readyState","setTimeout","addEventListener","lastUrl","location","href","urlObserver","MutationObserver","body","childList","subtree","reinitCounterAnimation"],"sourceRoot":""}